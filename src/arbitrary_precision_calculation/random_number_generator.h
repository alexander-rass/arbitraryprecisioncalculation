/**
* @file   arbitrary_precision_calculation/random_number_generator.h
* @author Alexander Raß (alexander.rass@fau.de)
* @date   July, 2013
* @brief  This file contains the available random number generators.
*
* @copyright
* This project is released under the MIT License (MIT).
*
* @copyright
* The MIT License (MIT)
*
* @copyright
* Copyright (c) 2016 by Friedrich-Alexander-Universität Erlangen-Nürnberg and
* Alexander Raß
*
* @copyright
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* @copyright
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* @copyright
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
*/

#ifndef ARBITRARY_PRECISION_CALCULATION_RANDOM_NUMBER_GENERATOR_H_
#define ARBITRARY_PRECISION_CALCULATION_RANDOM_NUMBER_GENERATOR_H_

#include <fstream>
#include <gmp.h>
#include <string>

namespace arbitraryprecisioncalculation {

/**
* @brief This class is an abstract class. It supplies the interface for random number generators.
*/
class RandomNumberGenerator{
public:
	/**
	* @brief The destructor.
	*/
	virtual ~RandomNumberGenerator();
	/**
	* @brief Creates a random mpf_t value in the interval [0,1].
	*
	* @return The random value.
	*/
	virtual mpf_t* RandomMpft() = 0;
	/**
	* @brief Creates a random long long value.
	*
	* @return The random value.
	*/
	virtual long long RandomLongLong() = 0;

	/**
	* @brief Loads data to reset the state of the random number generator to the state which was stored.
	*
	* @param input_stream The stream which contains the data about the state of the random number generator.
	*/
	virtual void LoadData(std::ifstream* input_stream) = 0;
	/**
	* @brief Stores the current state of this random number generator,
	* such that it can completely restore the current state with this data.
	*
	* @param output_stream The output stream where the state should be stored.
	*/
	virtual void StoreData(std::ofstream* output_stream) = 0;
	/**
	* @brief Returns a string representation of this object.
	*
	* @return The name of the object.
	*/
	virtual std::string GetName() = 0;
};

/**
* @brief This is a fast random number generator, which uses linear congruences.
* It uses the modulus 2<sup>63</sup>.
*/
class FastM2P63LinearCongruenceRandomNumberGenerator : public RandomNumberGenerator {
public:
	/**
	* @brief The constructor.
	*
	* @param multiplier The factor in the linear congruence.
	* @param adder The additive value in the linear congruence.
	* @param seed The initial seed of the random number generator.
	*/
	FastM2P63LinearCongruenceRandomNumberGenerator(unsigned long long multiplier, unsigned long long adder, unsigned long long seed);
	/**
	* @brief Creates a random mpf_t value in the interval [0,1].
	*
	* The random value is generated by a call of the random long long function and a division by the modulus 2<sup>63</sup>.
	*
	* @return The random value.
	*/
	mpf_t* RandomMpft();
	/**
	* @brief Creates a random long long value.
	*
	* Calculates the next random by the equation (adder + multiplier &middot; S) mod 2<sup>63</sup>,
	* where *S* is the previous random value or the initial seed
	* (if it is the first call of this function) and
	* *mod* means the modulo operation.
	*
	* @return The random value.
	*/
	long long RandomLongLong();

	void LoadData(std::ifstream*);
	void StoreData(std::ofstream*);
	std::string GetName();

private:
	const unsigned long long multiplier_;
	const unsigned long long adder_;
	const unsigned long long initial_seed_;
	unsigned long long seed_;
};

/**
* @brief This is a random number generator which uses linear congruences. It uses the modulus 2<sup>63</sup>.
*/
class IntenseM2P63LinearCongruenceRandomNumberGenerator : public RandomNumberGenerator {
public:
	/**
	* @brief The constructor.
	*
	* @param multiplier The factor in the linear congruence.
	* @param adder The additive value in the linear congruence.
	* @param seed The initial seed of the random number generator.
	* @param accept_bits The number of bits used by mpf_t generation from a call of function random long long.
	*/
	IntenseM2P63LinearCongruenceRandomNumberGenerator(unsigned long long multiplier, unsigned long long adder, unsigned long long seed, int accept_bits);
	/**
	* @brief Creates a random mpf_t value in the interval [0,1].
	*
	* Repeatedly calls random long long function until all bits of result value are randomly initialized.
	* Each time only the specified number of bits are used.
	*
	* @return The random value.
	*/
	mpf_t* RandomMpft();
	/**
	* @brief Creates a random long long value.
	*
	* Calculates the next random by the equation (adder + multiplier &middot; S) mod 2<sup>63</sup>,
	* where *S* is the previous random value or the initial seed
	* (if it is the first call of this function) and
	* *mod* means the modulo operation.
	*
	* @return The random value.
	*/
	long long RandomLongLong();

	void LoadData(std::ifstream*);
	void StoreData(std::ofstream*);
	std::string GetName();

private:
	const unsigned long long multiplier_;
	const unsigned long long adder_;
	const unsigned long long initial_seed_;
	unsigned long long seed_;
	int accept_bits_;
};

/**
* @brief This is a fast random number generator which uses linear congruences. 
*/
class FastLinearCongruenceRandomNumberGenerator : public RandomNumberGenerator {
public:
	/**
	* @brief The constructor.
	*
	* @param multiplier The factor in the linear congruence.
	* @param adder The additive value in the linear congruence.
	* @param modulus The modulus value in the linear congruence.
	* @param seed The initial seed of the random number generator.
	*/
	FastLinearCongruenceRandomNumberGenerator(unsigned long long multiplier, unsigned long long adder, unsigned long long modulus, unsigned long long seed);
	/**
	* @brief Creates a random mpf_t value in the interval [0,1].
	*
	* The random value is generated by a call of the random long long function and a division by the modulus.
	*
	* @return The random value.
	*/
	mpf_t* RandomMpft();
	/**
	* @brief Creates a random long long value.
	*
	* Calculates the next random by the equation (adder + multiplier &middot; S) mod modulus,
	* where *S* is the previous random value or the initial seed
	* (if it is the first call of this function) and
	* *mod* means the modulo operation.
	*
	* @return The random value.
	*/
	long long RandomLongLong();

	void LoadData(std::ifstream*);
	void StoreData(std::ofstream*);
	std::string GetName();

private:
	unsigned long long multiplier_;
	unsigned long long adder_;
	unsigned long long modulus_;
	const unsigned long long initial_seed_;
	unsigned long long seed_;
};

/**
* @brief This is a random number generator which uses linear congruences.
*/
class IntenseLinearCongruenceRandomNumberGenerator : public RandomNumberGenerator {
public:
	/**
	* @brief The constructor.
	*
	* @param multiplier The factor in the linear congruence.
	* @param adder The additive value in the linear congruence.
	* @param modulus The modulus value in the linear congruence.
	* @param seed The initial seed of the random number generator.
	*/
	IntenseLinearCongruenceRandomNumberGenerator(unsigned long long multiplier, unsigned long long adder, unsigned long long modulus, unsigned long long seed);
	/**
	* @brief Creates a random mpf_t value in the interval [0,1].
	*
	* Repeatedly calls random long long function until all bits of result value are randomly initialized.
	*
	* @return The random value.
	*/
	mpf_t* RandomMpft();
	/**
	* @brief Creates a random long long value.
	*
	* Calculates the next random by the equation (adder + multiplier &middot; S) mod modulus,
	* where *S* is the previous random value or the initial seed
	* (if it is the first call of this function) and
	* *mod* means the modulo operation.
	*
	* @return The random value.
	*/
	long long RandomLongLong();

	void LoadData(std::ifstream*);
	void StoreData(std::ofstream*);
	std::string GetName();

private:
	unsigned long long multiplier_;
	unsigned long long adder_;
	unsigned long long modulus_;
	const unsigned long long initial_seed_;
	unsigned long long seed_;
};

} // namespace arbitraryprecisioncalculation

#endif /* ARBITRARY_PRECISION_CALCULATION_RANDOM_NUMBER_GENERATOR_H_ */
